{
  "reference": {
    "description": "Template for secure credential management - DO NOT PUT REAL CREDENTIALS HERE",
    "version": "1.0",
    "last_updated": "2025-09-24"
  },
  "environment_variables": {
    "description": "All credentials should be stored as environment variables, never in code",
    "required": {
      "cloudflare": {
        "CLOUDFLARE_API_TOKEN": {
          "description": "Cloudflare API token with Pages:Edit permissions",
          "type": "secret",
          "scope": ["pages:write", "zone:read"],
          "example": "your_cloudflare_token_here",
          "where_to_get": "https://dash.cloudflare.com/profile/api-tokens",
          "security_note": "Use custom token with minimal permissions, not Global API Key"
        },
        "CLOUDFLARE_ACCOUNT_ID": {
          "description": "Cloudflare Account ID",
          "type": "identifier",
          "example": "your_account_id_here",
          "where_to_get": "Cloudflare Dashboard > Right sidebar"
        },
        "CLOUDFLARE_ZONE_ID": {
          "description": "Cloudflare Zone ID for domain",
          "type": "identifier",
          "example": "your_zone_id_here",
          "where_to_get": "Cloudflare Dashboard > Domain > Right sidebar"
        },
        "CLOUDFLARE_PROJECT_ID": {
          "description": "Cloudflare Pages Project ID",
          "type": "identifier",
          "example": "your_project_id_here",
          "where_to_get": "From Pages project URL or API response"
        }
      },
      "n8n": {
        "N8N_API_KEY": {
          "description": "N8N API JWT token for webhook authentication",
          "type": "jwt_token",
          "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
          "where_to_get": "N8N Dashboard > Settings > API Keys",
          "security_note": "JWT tokens contain sensitive data, rotate regularly"
        },
        "NEXT_PUBLIC_N8N_WEBHOOK_URL": {
          "description": "N8N webhook URL for form submissions",
          "type": "url",
          "example": "https://your-n8n.com/webhook/form-handler",
          "where_to_get": "N8N workflow webhook trigger node",
          "security_note": "Use HTTPS only, validate in production"
        }
      },
      "google": {
        "GEMINI_API_KEY": {
          "description": "Google Gemini AI API key",
          "type": "secret",
          "example": "AIzaSy...",
          "where_to_get": "Google Cloud Console > APIs & Services > Credentials",
          "security_note": "Restrict to specific APIs and IP addresses if possible"
        },
        "GOOGLE_CLIENT_ID": {
          "description": "Google OAuth 2.0 Client ID",
          "type": "oauth_client_id",
          "example": "123456789-abcdefg.apps.googleusercontent.com",
          "where_to_get": "Google Cloud Console > APIs & Services > Credentials > OAuth 2.0 Client IDs"
        },
        "GOOGLE_CLIENT_SECRET": {
          "description": "Google OAuth 2.0 Client Secret",
          "type": "secret",
          "example": "GOCSPX-...",
          "where_to_get": "Google Cloud Console > OAuth Client > Client Secret",
          "security_note": "CRITICAL: Never expose this in client-side code or public repositories"
        }
      },
      "mailchimp": {
        "MAILCHIMP_API_KEY": {
          "description": "Mailchimp API key for email marketing",
          "type": "secret",
          "example": "your_api_key-us18",
          "where_to_get": "Mailchimp Dashboard > Account > Extras > API Keys",
          "security_note": "Format includes datacenter suffix (us18, us19, etc.)"
        },
        "MAILCHIMP_AUDIENCE_ID": {
          "description": "Mailchimp list/audience ID for subscribers",
          "type": "identifier",
          "example": "your_list_id",
          "where_to_get": "Mailchimp > Audience > Settings > Unique ID"
        }
      },
      "telegram": {
        "TELEGRAM_BOT_TOKEN": {
          "description": "Telegram Bot API token",
          "type": "secret",
          "example": "123456789:ABCDEF...",
          "where_to_get": "BotFather on Telegram > /newbot",
          "security_note": "Keep secure, allows full bot control"
        },
        "TELEGRAM_CHAT_ID": {
          "description": "Telegram chat ID for notifications",
          "type": "identifier",
          "example": "123456789",
          "where_to_get": "Send /start to bot, check logs or use getUpdates API",
          "security_note": "Personal identifier - consider using group chat ID instead"
        }
      },
      "application": {
        "NODE_ENV": {
          "description": "Node.js environment",
          "type": "config",
          "values": ["development", "production", "test"],
          "example": "production"
        },
        "NEXT_PUBLIC_SITE_URL": {
          "description": "Public site URL for absolute links",
          "type": "url",
          "example": "https://ignitehealthsystems.com"
        }
      }
    }
  },
  "deployment_environments": {
    "development": {
      "storage": "Local .env.local file (not committed to git)",
      "access": "Developer workstations only",
      "credentials": "Development/sandbox API keys only"
    },
    "staging": {
      "storage": "CI/CD environment variables (GitHub Secrets, etc.)",
      "access": "Limited to staging environment",
      "credentials": "Staging-specific API keys"
    },
    "production": {
      "storage": "Platform environment variables (Cloudflare Pages, Vercel, etc.)",
      "access": "Production deployment pipeline only",
      "credentials": "Production API keys with full permissions"
    }
  },
  "security_best_practices": {
    "credential_management": {
      "do": [
        "Use environment variables for all secrets",
        "Rotate API keys regularly (quarterly minimum)",
        "Use least-privilege principle for API permissions",
        "Store secrets in platform-specific secure storage",
        "Use different keys for different environments",
        "Monitor API key usage and set up alerts",
        "Document all credentials in this reference file",
        "Use strong, unique passwords for service accounts"
      ],
      "never": [
        "Commit credentials to git repositories",
        "Share credentials via email or chat",
        "Use the same credentials across environments",
        "Store credentials in code comments or documentation",
        "Use default or weak passwords",
        "Share API keys between different applications",
        "Log credentials in application logs",
        "Hardcode credentials in deployment scripts"
      ]
    },
    "environment_setup": {
      "local_development": [
        "Create .env.local file with development credentials",
        "Add .env* to .gitignore",
        "Use sandbox/test API keys only",
        "Never use production credentials locally"
      ],
      "ci_cd_pipeline": [
        "Store secrets in CI/CD platform secret manager",
        "Use least-privilege service accounts",
        "Separate credentials by environment",
        "Rotate deployment credentials regularly"
      ],
      "production_deployment": [
        "Use platform environment variable systems",
        "Enable API key restrictions (IP, referrer, etc.)",
        "Monitor for unusual API usage patterns",
        "Set up automatic credential rotation where possible"
      ]
    }
  },
  "credential_rotation_schedule": {
    "quarterly": [
      "GEMINI_API_KEY",
      "MAILCHIMP_API_KEY",
      "TELEGRAM_BOT_TOKEN"
    ],
    "monthly": [
      "N8N_API_KEY"
    ],
    "annually": [
      "GOOGLE_CLIENT_SECRET"
    ],
    "as_needed": [
      "CLOUDFLARE_API_TOKEN (when permissions change)",
      "TELEGRAM_CHAT_ID (if compromise suspected)"
    ]
  },
  "monitoring_and_alerts": {
    "api_usage_monitoring": [
      "Set up usage alerts for all API keys",
      "Monitor for unusual usage patterns",
      "Track API call origins and timing",
      "Set rate limits where possible"
    ],
    "security_monitoring": [
      "Enable login notifications for all service accounts",
      "Monitor for new credential generation",
      "Set up alerts for API key access from new IPs",
      "Regular security audit of connected services"
    ]
  },
  "emergency_procedures": {
    "credential_compromise": {
      "immediate_steps": [
        "1. Revoke compromised credential immediately",
        "2. Generate new credential with different permissions if possible",
        "3. Update all deployment environments with new credential",
        "4. Monitor affected services for suspicious activity",
        "5. Review access logs for compromise timeline",
        "6. Update incident response documentation"
      ],
      "recovery_steps": [
        "1. Test all functionality with new credentials",
        "2. Verify no residual access with old credentials",
        "3. Update team on new security procedures if needed",
        "4. Schedule post-incident review and security audit"
      ]
    }
  },
  "compliance_notes": {
    "gdpr": "Ensure API keys with access to personal data are properly managed and logged",
    "hipaa": "Healthcare-related API keys must follow additional security requirements",
    "pci": "Payment-related credentials require PCI compliance measures"
  }
}