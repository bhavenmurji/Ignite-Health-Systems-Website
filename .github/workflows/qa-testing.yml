name: QA Testing Suite - Ignite Health Systems

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run performance tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'

jobs:
  unit-and-integration-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests with coverage
      run: npm run test:coverage

    - name: Run integration tests
      run: npm run test -- tests/integration/

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./tests/reports/coverage/lcov.info
        name: ignite-health-coverage

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: tests/reports/jest-results.xml

  end-to-end-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        browser: [chromium, firefox, webkit]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps ${{ matrix.browser }}

    - name: Start development server
      run: |
        npm run dev &
        npx wait-on http://localhost:3000 --timeout 60000

    - name: Run E2E tests
      run: npm run test:e2e -- --project=${{ matrix.browser }}

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results-${{ matrix.browser }}
        path: |
          tests/reports/playwright-results.json
          test-results/

    - name: Upload screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: e2e-screenshots-${{ matrix.browser }}
        path: test-results/

  accessibility-tests:
    name: Accessibility Tests (WCAG 2.1 AA)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run accessibility tests
      run: npm run test:accessibility

    - name: Generate accessibility report
      run: |
        mkdir -p tests/reports/accessibility
        npm run test:accessibility -- --json --outputFile=tests/reports/accessibility/results.json

    - name: Upload accessibility results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: accessibility-results
        path: tests/reports/accessibility/

  performance-tests:
    name: Performance & Lighthouse Audits
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Start development server
      run: |
        npm run dev &
        npx wait-on http://localhost:3000 --timeout 60000

    - name: Run Lighthouse audits
      run: npm run test:performance

    - name: Check performance thresholds
      run: |
        node -e "
          const summary = require('./tests/reports/lighthouse/summary-report.json');
          const thresholds = { performance: 90, accessibility: 95, seo: 95 };

          Object.entries(thresholds).forEach(([metric, threshold]) => {
            const score = summary.averageScores[metric];
            if (score < threshold) {
              console.error(\`❌ \${metric}: \${score}/100 (threshold: \${threshold})\`);
              process.exit(1);
            } else {
              console.log(\`✅ \${metric}: \${score}/100\`);
            }
          });
        "

    - name: Upload Lighthouse reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: lighthouse-reports
        path: tests/reports/lighthouse/

  visual-regression-tests:
    name: Visual Regression Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium

    - name: Start development server
      run: |
        npm run dev &
        npx wait-on http://localhost:3000 --timeout 60000

    - name: Run visual regression tests
      run: npm run test:visual

    - name: Upload visual diff images
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: visual-regression-diffs
        path: test-results/

  mobile-device-tests:
    name: Mobile Device Testing
    runs-on: ubuntu-latest

    strategy:
      matrix:
        device:
          - 'iPhone 12'
          - 'Pixel 5'
          - 'iPad'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright browsers
      run: npx playwright install --with-deps

    - name: Start development server
      run: |
        npm run dev &
        npx wait-on http://localhost:3000 --timeout 60000

    - name: Run mobile device tests
      run: |
        npx playwright test \
          --config=tests/playwright.config.js \
          --project="Mobile ${{ matrix.device }}" \
          tests/e2e/waitlist-journey.spec.js

    - name: Upload mobile test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: mobile-test-results-${{ matrix.device }}
        path: test-results/

  security-scan:
    name: Security & HIPAA Compliance
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security audit
      run: npm audit --audit-level high

    - name: Check for sensitive data
      run: |
        # Check for potential HIPAA violations in code
        if grep -r "ssn\|social.*security\|patient.*id\|medical.*record" --include="*.js" --include="*.html" .; then
          echo "⚠️  Potential sensitive data found in code"
          exit 1
        fi

    - name: Check HTTPS requirements
      run: |
        if grep -r "http://" --include="*.js" --include="*.html" . | grep -v localhost; then
          echo "❌ Non-HTTPS URLs found (HIPAA compliance issue)"
          exit 1
        fi

  quality-gate:
    name: Quality Gate
    needs: [unit-and-integration-tests, end-to-end-tests, accessibility-tests, performance-tests, visual-regression-tests, security-scan]
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: Check all jobs status
      run: |
        echo "Unit & Integration Tests: ${{ needs.unit-and-integration-tests.result }}"
        echo "End-to-End Tests: ${{ needs.end-to-end-tests.result }}"
        echo "Accessibility Tests: ${{ needs.accessibility-tests.result }}"
        echo "Performance Tests: ${{ needs.performance-tests.result }}"
        echo "Visual Regression: ${{ needs.visual-regression-tests.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"

        if [ "${{ needs.unit-and-integration-tests.result }}" != "success" ] ||
           [ "${{ needs.end-to-end-tests.result }}" != "success" ] ||
           [ "${{ needs.accessibility-tests.result }}" != "success" ] ||
           [ "${{ needs.performance-tests.result }}" != "success" ] ||
           [ "${{ needs.security-scan.result }}" != "success" ]; then
          echo "❌ Quality gate failed - blocking deployment"
          exit 1
        else
          echo "✅ All quality checks passed"
        fi

  notify-team:
    name: Notify QA Team
    needs: [quality-gate]
    runs-on: ubuntu-latest
    if: failure()

    steps:
    - name: Notify on failure
      run: |
        echo "🚨 QA Testing Suite Failed for Ignite Health Systems"
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"
        echo "Author: ${{ github.actor }}"

        # In a real implementation, you'd send notifications to:
        # - Slack/Teams
        # - Email alerts
        # - GitHub Issues
        # - PagerDuty (for critical failures)

  deploy-staging:
    name: Deploy to Staging
    needs: [quality-gate]
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/develop'

    steps:
    - name: Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment"
        echo "All quality gates passed - safe to deploy"

        # Real deployment commands would go here
        # - Update staging environment
        # - Run smoke tests
        # - Notify stakeholders

# Healthcare-specific job for compliance monitoring
  hipaa-compliance-check:
    name: HIPAA Compliance Monitoring
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check data handling compliance
      run: |
        echo "🏥 Running HIPAA compliance checks..."

        # Check for proper data encryption
        if ! grep -r "encrypt\|hash\|secure" --include="*.js" .; then
          echo "⚠️  No encryption/security measures found"
        fi

        # Verify no hardcoded credentials
        if grep -r "password\|secret\|key.*=" --include="*.js" --exclude-dir=tests .; then
          echo "❌ Potential hardcoded credentials found"
          exit 1
        fi

        # Check for audit logging
        if grep -r "console\.log\|alert\|confirm" --include="*.js" . | grep -v test; then
          echo "⚠️  Debug statements found in production code"
        fi

        echo "✅ Basic HIPAA compliance checks passed"